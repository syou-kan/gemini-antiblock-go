# 工作流的名称
name: Build and Push Docker Image

# --- 触发工作流的事件 ---
on:
  # 1. 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
    # 2. 只有当代码文件（非文档）发生变更时才触发，避免浪费资源
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

  # 3. 当创建一个格式为 vX.X.X 的 Git 标签时触发（用于发布正式版本）
  #    例如：git tag v1.0.1 && git push origin v1.0.1
  #    镜像标签将会是 1.0.1 和 latest
  create:
    tags:
      - 'v*.*.*'

  # 4. 允许你在 GitHub Actions 页面上手动触发此工作流
  workflow_dispatch:

# --- 工作流执行的任务 ---
jobs:
  build-and-push:
    # 任务名称
    name: Build and Push to GHCR
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # --- 授予 GITHUB_TOKEN 的权限 ---
    # 这是让工作流有权推送到 GitHub Packages (ghcr.io) 的关键
    permissions:
      contents: read      # 允许 checkout 代码
      packages: write    # 允许推送 Docker 镜像

    # --- 任务执行的步骤 ---
    steps:
      # 步骤 1: 检出（下载）你的仓库代码到虚拟机中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # 使用自动生成的 GITHUB_TOKEN，这是最安全的方式，无需手动创建 PAT
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 3: 提取 Docker 元数据（如标签和标注）
      # 这个 Action 会根据触发事件（分支、标签）自动生成合适的 Docker 标签
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 指定要推送的镜像仓库地址
          images: ghcr.io/${{ github.repository }}

      # 步骤 4: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Dockerfile 的路径
          context: .
          # 确定要推送镜像
          push: true
          # 使用上一步 "meta" 自动生成的标签
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 启用构建缓存，大幅提升后续构建速度
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
